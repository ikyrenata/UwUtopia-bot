/// <reference path="../node_modules/@types/node/index.d.ts" />
/// <reference types="node" />
export default class HGRepo {
    path: string;
    /**
     * Create a new HGRepo with a rootpath defined
     * by the passed in `@path` (defaults to `process.cwd()`)
     */
    constructor(path?: string | null);
    /**
     * Create a new repo in a random temp directory.
     * Useful for no-repo commands like init and clone that require a repo
     */
    static MakeTempRepo: (done: (err: Error | null, repo?: HGRepo | undefined) => void) => void;
    /**
     * Initialize a new repository at the provided path.
     * Due to limitations of the cmdserver, this must be run from an existing repo.
     */
    init: (initPath: string, done: Function) => import("child_process").ChildProcess;
    /**
     * Add files to a repository.
     */
    add: (paths: string[], done: Function) => void;
    /**
     * Commit changes to a repository
     */
    commit: (paths: any, opts: any, done?: Function | undefined) => import("child_process").ChildProcess;
    /**
     * Clone a repository.
     * Due to limitations of the cmdserver,
     * this must be run from an existing location.
     */
    clone: (from: string, to: string, opts: any, done?: Function | undefined) => import("child_process").ChildProcess;
    /**
     * Get a summary of the current repository path.
     */
    summary: (opts: any, done?: Function | undefined) => import("child_process").ChildProcess;
    /**
     * Get a log of commits for this repository.
     * `opts` is optional and can be either an object or array of arguments.
     */
    log: (opts: any, done?: Function | undefined) => import("child_process").ChildProcess;
    /**
     * Pull changes from another repository.
     */
    pull: (from: string, opts: any, done?: Function | undefined) => import("child_process").ChildProcess;
    /**
     * Update to the latest changes in a repository.
     */
    update: (opts: any, done?: Function | undefined) => import("child_process").ChildProcess;
    /**
     * Push changes to another repository
     */
    push: (to: string, opts: any, done?: Function | undefined) => import("child_process").ChildProcess;
    /**
     * Merge changes from another repository
     */
    merge: (opts: any, done?: Function | undefined) => import("child_process").ChildProcess;
    /**
     * Resolve conflicts in a repository.
     */
    resolve: (opts: any, done: Function) => import("child_process").ChildProcess;
    /**
     * Create tags in repo.
     */
    tag: (tagName: string, opts: any, done?: Function | undefined) => import("child_process").ChildProcess;
    /**
     * Retrieve repo tags.
     */
    tags: (opts: any, done?: Function | undefined) => import("child_process").ChildProcess;
    /**
     * Repo status.
     */
    status: (opts: any, done: Function) => import("child_process").ChildProcess;
    /**
     * Repo branches.
     */
    branches: (opts: any, done?: Function | undefined) => import("child_process").ChildProcess;
    /**
     * Repo branch creator.
     */
    branch: (name: string, opts: any, done?: Function | undefined) => import("child_process").ChildProcess;
    /**
     * Repo heads list
     */
    heads: (opts: any, done?: Function | undefined) => import("child_process").ChildProcess;
    /**
     * Diff
     */
    diff: (opts: any, done?: Function | undefined) => import("child_process").ChildProcess;
    /**
     * Version of hg process
     */
    version: (done: Function) => import("child_process").ChildProcess;
    /**
     * Remove files from a repository.
     */
    remove: (paths: string[], done: Function) => import("child_process").ChildProcess;
    /**
     * Execute server command
     * @param args
     * @param opts [Object, Array, String, Function] optional arguments to append
     * to command args. If opts is a function it is treated as the callback function.
     * @param done [Function] callback when command completes
     */
    runCommand: (args: string | string[], opts: any, done?: Function | undefined) => import("child_process").ChildProcess;
    /**
     * Parse an object into an array of command line arguments
     */
    private _parseOptions;
    /**
     * Start a command server and return it for use
     */
    private _startServer;
    /**
     * Convenience wrapper for starting a command server and executing a command
     */
    private _runCommandGetOutput;
}
