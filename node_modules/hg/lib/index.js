"use strict";
var HGCommandServer_1 = require("./HGCommandServer");
var HGRepo_1 = require("./HGRepo");
var Parsers_1 = require("./Parsers");
var api;
/**
 * The public facing API of the node-hg module exposes convenience
 * methods for various common Mercurial tasks.
 */
var HGAPI = /** @class */ (function () {
    function HGAPI() {
        this.HGCommandServer = HGCommandServer_1.default;
        this.HGRepo = HGRepo_1.default;
        this.Parsers = Parsers_1.default;
        this.init = function (initPath, opts, done) {
            HGRepo_1.default.MakeTempRepo(function (err, repo) {
                if (err) {
                    return done(err);
                }
                repo && repo.init(initPath, done);
            });
        };
        this.clone = function (from, to, opts, done) {
            HGRepo_1.default.MakeTempRepo(function (err, repo) {
                if (err) {
                    return done(err);
                }
                repo && repo.clone(from, to, opts, done);
            });
        };
        this.add = function (path, opts, done) {
            var repo = new HGRepo_1.default(path);
            repo.add(opts, done);
        };
        this.commit = function (path, opts, done) {
            var repo = new HGRepo_1.default(path);
            repo.commit(opts, done);
        };
        this.summary = function (path, opts, done) {
            var repo = new HGRepo_1.default(path);
            repo.summary(opts, done);
        };
        this.log = function (path, opts, done) {
            var repo = new HGRepo_1.default(path);
            repo.log(opts, done);
        };
        this.version = function (done) {
            var repo = new HGRepo_1.default(null);
            repo.version(done);
        };
        this.makeParser = function (done) {
            if (api) {
                api.version(function (err, out) {
                    return done(err, new Parsers_1.default(Parsers_1.default.version(out)));
                });
            }
        };
    }
    return HGAPI;
}());
api = new HGAPI();
module.exports = api;
