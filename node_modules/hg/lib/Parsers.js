"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Parsers = /** @class */ (function () {
    function Parsers(hgVersion) {
        this.hgVersion = "";
        /**
         * Parse `tags` command text response. Returns an object with tag names as
         * object keys. Key value is a 2 element array of revision number and revision
         * hash.
         *  tags = {"<tag name>":["<rev number>":"<hash>"]}
         */
        this.tags = function (out) {
            var rest = out;
            var tags = {};
            while (rest[0].channel !== "r") {
                var namerec = rest[0], verrec = rest[1], nl = rest[2], otherRest = rest.slice(3);
                rest = otherRest;
                var name_1 = namerec.body;
                var _a = verrec.body.split(":"), lver = _a[0], hver = _a[1];
                tags[name_1] = [lver.trim(), hver.trim()];
            }
            return tags;
        };
        /**
         * Parse `status` command text response. Returns an object with file names as
         * object keys. Key value is the status id.
         *  status = {"<file name>":"<status>"}
         */
        this.status = function (out) {
            var rest = out;
            var states = {};
            while (rest[0].channel !== "r") {
                var staterec = rest[0], filerec = rest[1], otherRest = rest.slice(2);
                rest = otherRest;
                var state = staterec.body.trim();
                var file = filerec.body.trim();
                states[file] = state;
            }
            return states;
        };
        this.hgVersion = hgVersion;
    }
    /**
     * Parse command output as raw text content.
     * repo.branches (err, out) -> console.log Parsers.text(out)
     */
    Parsers.text = function (out) { return out
        .filter(function (line) { return line.channel === "o"; })
        .map(function (line) { return line.body; }).join(""); };
    /**
     * Parse command output as json content. This is useful when JSON template
     * is passed as an option to the command (i.e. `-Tjson`).
     *      repo.branches {"--template":"json"}, (err, out) ->
     *      branches = Parsers.json out
     *      branches.forEach (b) ->
     *      console.log "#{b.branch} #{b.active}"
     */
    Parsers.json = function (out) {
        return JSON.parse(Parsers.text(out));
    };
    /**
     * Parse version from `version` command. Returns a string version number.
     */
    Parsers.version = function (out) {
        var versionRegEx = new RegExp(".*version (.*)\\)");
        var version = versionRegEx.exec(out[0].body);
        if (version) {
            return version[1];
        }
        var versionRegExRu = new RegExp(".*версия (.*)\\)");
        var versionRu = versionRegExRu.exec(out[0].body);
        if (versionRu) {
            return versionRu[1];
        }
        throw new Error("Unable to parse version data");
    };
    return Parsers;
}());
exports.default = Parsers;
